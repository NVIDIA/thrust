Import('env')
import os

# clone the parent's env so that we do not modify it
my_env = env.Clone()

vars = Variables()

# add a variable to filter source files by a regex
vars.Add('tests', 'Filter test files using a regex', '.')

# update variables
my_env.Help(vars.GenerateHelpText(env))
vars.Update(my_env)

# populate the environment

# with cl we have to do /bigobj
if my_env.subst('$CXX') == 'cl':
  my_env.Append(CPPFLAGS = '/bigobj')

# #include the current directory
my_env.Append(CPPPATH = Dir('.').srcnode())

# find all .cus & .cpps
sources = []
extensions  = ['*.cu', '*.cpp']

# gather sources in the current directorie
for ext in extensions:
  sources.extend(my_env.Glob(ext))

# gather sources from directories
backend_sources = SConscript('backend/SConscript', exports='env') 

# filter sources
import re
filter_exp = 'int main|driver_instance|{0}'.format(my_env['tests'])
pattern = re.compile(filter_exp)
def test_filter(src):
  return pattern.search(src.get_contents())

sources         = filter(test_filter,         sources)
backend_sources = filter(test_filter, backend_sources)

testframework_src = []
for s in sources:
    if "testframework" in str(s):
        sources.remove(s);
        testframework_src.append(str(s))
        break

backend_testframework_src = []
for s in backend_sources:
    if "testframework" in str(s):
        backend_sources.remove(s);
        testframework_src.append(str(s))


unit_tests = []
for s in sources:
    name = "test."+os.path.splitext(os.path.basename(str(s)))[0]
    test = my_env.Program(name, testframework_src + [str(s)]);
    my_env.Alias(name, [test])
    unit_tests.append(test);

backend=env['device_backend']
for s in backend_sources:
    name = "test."+backend+"."+os.path.splitext(os.path.basename(str(s)))[0]
    test = my_env.Program(name, testframework_src + [str(s)]);
    my_env.Alias(name, [test])
    unit_tests.append(test);


# create a 'unit_tests' alias
unit_tests_alias = my_env.Alias('unit_tests', unit_tests)

# add the verbose tester to the 'run_unit_tests' alias
unit_tests_verbose_exe = []
unit_tests_exe = []
for t in unit_tests:
    unit_tests_exe.append(t[0].abspath);
    unit_tests_verbose_exe.append(t[0].abspath + " --verbose");

run_unit_tests_alias = my_env.Alias('run_unit_tests', unit_tests,  unit_tests_exe);

# always build the 'run_unit_tests' target whether or not it needs it
my_env.AlwaysBuild(run_unit_tests_alias)

# add the unit tests alias to the 'run_tests' alias
my_env.Alias('run_tests', unit_tests, unit_tests_exe);

# build children
SConscript('trivial_tests/SConscript', exports='env')

