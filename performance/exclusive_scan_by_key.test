PREAMBLE = \
    """
    #include <thrust/scan.h>
    """

INITIALIZE = \
    """
    thrust::host_vector<$ValueType>   h_values = unittest::random_integers<$ValueType>($InputSize);
    thrust::device_vector<$ValueType> d_values = h_values;
    
    thrust::host_vector<$ValueType>   h_output($InputSize);
    thrust::device_vector<$ValueType> d_output($InputSize);
    
    srand(13);
    thrust::host_vector<$KeyType> h_keys($InputSize);
    for(size_t i = 0, k = 0; i < $InputSize; i++)
    {
        h_keys[i] = k;
        if (rand() % 50 == 0)
            k++;
    }
    thrust::device_vector<$KeyType> d_keys = h_keys;

    $KeyType init = 0;

    thrust::exclusive_scan_by_key(h_keys.begin(), h_keys.end(), h_values.begin(), h_output.begin(), init);
    thrust::exclusive_scan_by_key(d_keys.begin(), d_keys.end(), d_values.begin(), d_output.begin(), init);
                                                            
    ASSERT_EQUAL(h_output, d_output);                       
    """                                                     
                                                            
TIME = \
    """                                                     
    thrust::exclusive_scan_by_key(d_keys.begin(), d_keys.end(), d_values.begin(), d_output.begin(), init);
    """

FINALIZE = \
    """
    RECORD_TIME();
    RECORD_THROUGHPUT(double($InputSize));
    RECORD_BANDWIDTH(4*(sizeof($KeyType) + sizeof($ValueType))*double($InputSize));
    """

KeyTypes   = ['int'] #SignedIntegerTypes
ValueTypes = SignedIntegerTypes
InputSizes = [2**24] #StandardSizes

TestVariables = [('KeyType', KeyTypes), ('ValueType', ValueTypes), ('InputSize', InputSizes)]

